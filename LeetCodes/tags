!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BigOrSmallEndianJudge	codeHub.cpp	/^void BigOrSmallEndianJudge()$/;"	f
BubbleSort	05s-只出现一次的数字.c	/^void BubbleSort(int *arr, int arrSize)$/;"	f
BubbleSort	06s-移除元素.c	/^void BubbleSort(int *arr, int arrSize)$/;"	f
BubbleSort	codeHub.cpp	/^void BubbleSort(NumType *arr, int arrSize) \/* 冒泡 *\/$/;"	f
DecToBinary	codeHub.cpp	/^string DecToBinary(unsigned long long int dec)$/;"	f
DecToBinaryTest	codeHub.cpp	/^void DecToBinaryTest()$/;"	f
GenerateRandomNum	codeHub.cpp	/^int GenerateRandomNum()$/;"	f
GetCurTime	codeHub.cpp	/^void GetCurTime(char **cur_time)$/;"	f
GetLocalIP	codeHub.cpp	/^void GetLocalIP(char *IP)$/;"	f
INTMAX	19s-整数反转.cpp	/^#define INTMAX /;"	d	file:
INTMIN	19s-整数反转.cpp	/^#define INTMIN /;"	d	file:
LINE_SIZE	codeHub.cpp	/^#define LINE_SIZE /;"	d	file:
ListNode	08-删除链表倒数第N个元素.cpp	/^    ListNode(int x) : val(x), next(NULL) {}$/;"	f	struct:ListNode
ListNode	08-删除链表倒数第N个元素.cpp	/^struct ListNode {$/;"	s	file:
ListNode	13s-合并两个有序链表.cpp	/^    ListNode(int x) : val(x), next(NULL) {}$/;"	f	struct:ListNode
ListNode	13s-合并两个有序链表.cpp	/^struct ListNode {$/;"	s	file:
ListNode	14s-删除排序链表中的重复元素.cpp	/^    ListNode(int x) : val(x), next(NULL) {}$/;"	f	struct:ListNode
ListNode	14s-删除排序链表中的重复元素.cpp	/^struct ListNode {$/;"	s	file:
MAX	my.h	/^#define MAX /;"	d
MY_H	my.h	/^#define MY_H$/;"	d
MergeTwoVectorInOrder	12s-两个排序数组的中位数.cpp	/^vector<int> MergeTwoVectorInOrder(const vector<int>& nums1, const vector<int>& nums2)$/;"	f
Partition	codeHub.cpp	/^int Partition(int data[], int length, int start, int end)$/;"	f
PrintVector	12s-两个排序数组的中位数.cpp	/^void PrintVector(vector<int> &vec)$/;"	f
RandomInRange	codeHub.cpp	/^int RandomInRange(int min, int max)$/;"	f
ReadSpeacialLine	codeHub.cpp	/^char* ReadSpeacialLine(const char* filename, int whichLine)$/;"	f
Solution	08-删除链表倒数第N个元素.cpp	/^class Solution {$/;"	c	file:
Solution	12s-两个排序数组的中位数.cpp	/^class Solution {$/;"	c	file:
Solution	13s-合并两个有序链表.cpp	/^class Solution {$/;"	c	file:
Solution	14s-删除排序链表中的重复元素.cpp	/^class Solution {$/;"	c	file:
Solution	15s-环形链表.cpp	/^class Solution {$/;"	c	file:
Solution	16s-相交链表.cpp	/^class Solution {$/;"	c	file:
Solution	17s-回文数.cpp	/^class Solution {$/;"	c	file:
Solution	18s-回文链表.cpp	/^class Solution {$/;"	c	file:
Solution	19s-整数反转.cpp	/^class Solution {$/;"	c	file:
StringFind	codeHub.cpp	/^int StringFind(const char *pSrc, const char *pDst)$/;"	f
a	codeHub.cpp	/^int a[101],n;\/\/定义全局变量，这两个变量需要在子函数中使用$/;"	v
a	temp.cpp	/^int a[101],n;\/\/定义全局变量，这两个变量需要在子函数中使用$/;"	v
add1Ton_recursive	codeHub.cpp	/^int add1Ton_recursive(int n)  \/\/ recursive way$/;"	f
addOneNodeToTail	13s-合并两个有序链表.cpp	/^bool addOneNodeToTail(int item, ListNode **head)  \/\/ **是为了要改变head指向的地址$/;"	f
addOneNodeToTail	14s-删除排序链表中的重复元素.cpp	/^bool addOneNodeToTail(int item, ListNode **head)  \/\/ **是为了要改变head指向的地址$/;"	f
backward	codeHub.cpp	/^void backward(int *arr, int pos, int len)  \/\/ 从pos位置整体后移$/;"	f
buffer	codeHub.cpp	/^char buffer[64] = {0};$/;"	v
consecutiveNumbersSum	07-连续整数求和.c	/^int consecutiveNumbersSum(int N) {$/;"	f
consecutiveNumbersSum_overtime	07-连续整数求和.c	/^int consecutiveNumbersSum_overtime(int N) {$/;"	f
consecutiveNumbersSum_right	07-连续整数求和.c	/^int consecutiveNumbersSum_right(int N) {$/;"	f
deleteDuplicates	14s-删除排序链表中的重复元素.cpp	/^    ListNode* deleteDuplicates(ListNode* head) {$/;"	f	class:Solution
equal	codeHub.cpp	/^bool equal(double num1, double num2)  \/\/ 判断两小数是否相等要看两数绝对值只差是否小于某数$/;"	f
findCycleEntryNode	15s-环形链表.cpp	/^	Link *findCycleEntryNode(Link *head, Link *meetNode) {$/;"	f	class:Solution
findMedianSortedArrays	12s-两个排序数组的中位数.cpp	/^    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {$/;"	f	class:Solution
findSlowAndFastMeetNode	15s-环形链表.cpp	/^	Link *findSlowAndFastMeetNode(Link *head) {$/;"	f	class:Solution
getIntersectionNode	16s-相交链表.cpp	/^    Link *getIntersectionNode(Link *headA, Link *headB) {$/;"	f	class:Solution
hasCycle	15s-环形链表.cpp	/^    bool hasCycle(Link *head) {$/;"	f	class:Solution
insertSort	codeHub.cpp	/^int *insertSort(int *arr, int len)$/;"	f
inttohex	codeHub.cpp	/^char *inttohex(int aa)$/;"	f
isOverFlow	19s-整数反转.cpp	/^	bool isOverFlow(int x, int pop) {$/;"	f	class:Solution
isPalindrome	10-分割回文串.cpp	/^bool isPalindrome(string str_ori) {$/;"	f
isPalindrome	17s-回文数.cpp	/^    bool isPalindrome(int x) {$/;"	f	class:Solution
isPalindrome	18s-回文链表.cpp	/^    bool isPalindrome(Link* head) {$/;"	f	class:Solution
isPalindrome_better	17s-回文数.cpp	/^	bool isPalindrome_better(int x) {$/;"	f	class:Solution
isPhraseString	09s-验证回文串.cpp	/^bool isPhraseString(string &str_ori)$/;"	f
isPhraseString	17s-回文数.cpp	/^	bool isPhraseString(string &str_ori)$/;"	f	class:Solution
listNodeToString	08-删除链表倒数第N个元素.cpp	/^string listNodeToString(ListNode* node) {$/;"	f
main	01s-排序数组删除重复项.c	/^int main()$/;"	f
main	02s-两数之和.c	/^int main()$/;"	f
main	03s-移动零.c	/^int main()$/;"	f
main	04-加一.c	/^int main()$/;"	f
main	05s-只出现一次的数字.c	/^int main()$/;"	f
main	06s-移除元素.c	/^int main()$/;"	f
main	07-连续整数求和.c	/^int main()$/;"	f
main	08-删除链表倒数第N个元素.cpp	/^int main() {$/;"	f
main	09s-验证回文串.cpp	/^int main()$/;"	f
main	10-分割回文串.cpp	/^int main()$/;"	f
main	11s-实现strstr.cpp	/^int main()$/;"	f
main	12s-两个排序数组的中位数.cpp	/^int main()$/;"	f
main	15s-环形链表.cpp	/^int main()$/;"	f
main	16s-相交链表.cpp	/^int main()$/;"	f
main	17s-回文数.cpp	/^int main()$/;"	f
main	18s-回文链表.cpp	/^int main()$/;"	f
main	19s-整数反转.cpp	/^int main()$/;"	f
main	codeHub.cpp	/^int main()$/;"	f
main	temp.cpp	/^int main()$/;"	f
main	test.cpp	/^int main()$/;"	f
maxbit	codeHub.cpp	/^int maxbit(int data[], int n) \/\/辅助函数，求数据的最大位数$/;"	f
mergeTwoLists	13s-合并两个有序链表.cpp	/^    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution
moveZeroes	03s-移动零.c	/^void moveZeroes(int* nums, int numsSize) {$/;"	f
myprint	codeHub.cpp	/^#define myprint(/;"	d	file:
n	codeHub.cpp	/^int a[101],n;\/\/定义全局变量，这两个变量需要在子函数中使用$/;"	v
n	temp.cpp	/^int a[101],n;\/\/定义全局变量，这两个变量需要在子函数中使用$/;"	v
next	08-删除链表倒数第N个元素.cpp	/^    ListNode *next;$/;"	m	struct:ListNode	file:
next	13s-合并两个有序链表.cpp	/^    ListNode *next;$/;"	m	struct:ListNode	file:
next	14s-删除排序链表中的重复元素.cpp	/^    ListNode *next;$/;"	m	struct:ListNode	file:
partition	10-分割回文串.cpp	/^vector<vector<string>> partition(string &s) {$/;"	f
plusOne	04-加一.c	/^int* plusOne(int* digits, int digitsSize, int* returnSize) {$/;"	f
power	04-加一.c	/^int power(int num, int powNum) \/\/ added by luhg$/;"	f
power	codeHub.cpp	/^int power(int num, int powNum)$/;"	f
printArr	codeHub.cpp	/^int printArr(NumType *arr, int len)$/;"	f
printArray	03s-移动零.c	/^void printArray(int *arr, int len)$/;"	f
quicksort	codeHub.cpp	/^void quicksort(int left,int right)$/;"	f
quicksort	temp.cpp	/^void quicksort(int left,int right)$/;"	f
quicksortTest	codeHub.cpp	/^void quicksortTest()$/;"	f
radixsort	codeHub.cpp	/^void radixsort(int data[], int n) \/\/基数排序$/;"	f
redirection	codeHub.cpp	/^void redirection() \/* 把输出重定向，再恢复重定向 *\/$/;"	f
removeDuplicates	01s-排序数组删除重复项.c	/^int removeDuplicates(int* nums, int numsSize) {$/;"	f
removeElement	06s-移除元素.c	/^int removeElement(int* nums, int numsSize, int val) {$/;"	f
removeNthFromEnd	08-删除链表倒数第N个元素.cpp	/^    ListNode* removeNthFromEnd(ListNode* head, int n) {$/;"	f	class:Solution
reverse	19s-整数反转.cpp	/^    int reverse(int x) {$/;"	f	class:Solution
selectSort	codeHub.cpp	/^void selectSort(int *arr, int len) \/* 选择排序 *\/$/;"	f
showStack	16s-相交链表.cpp	/^		void showStack(stack<Link *> ss) {$/;"	f	class:Solution	file:
singleNumber	05s-只出现一次的数字.c	/^int singleNumber(int* nums, int numsSize) {$/;"	f
str2array	codeHub.cpp	/^void str2array(char *str, int *arr, char *token)$/;"	f
strStr	11s-实现strstr.cpp	/^int strStr(char* haystack, char* needle) $/;"	f
strStr	test.cpp	/^int strStr(char* haystack, char* needle) $/;"	f
stringToInteger	08-删除链表倒数第N个元素.cpp	/^int stringToInteger(string input) {$/;"	f
stringToIntegerVector	08-删除链表倒数第N个元素.cpp	/^vector<int> stringToIntegerVector(string input) {$/;"	f
stringToListNode	08-删除链表倒数第N个元素.cpp	/^ListNode* stringToListNode(string input) {$/;"	f
swap	codeHub.cpp	/^T swap(T *a, T *b)$/;"	f
swap	temp.cpp	/^T swap(T *a, T *b)$/;"	f
trimLeftTrailingSpaces	08-删除链表倒数第N个元素.cpp	/^void trimLeftTrailingSpaces(string &input) {$/;"	f
trimRightTrailingSpaces	08-删除链表倒数第N个元素.cpp	/^void trimRightTrailingSpaces(string &input) {$/;"	f
twoSum	02s-两数之和.c	/^int* twoSum(int* nums, int numsSize, int target) {$/;"	f
val	08-删除链表倒数第N个元素.cpp	/^    int val;$/;"	m	struct:ListNode	file:
val	13s-合并两个有序链表.cpp	/^    int val;$/;"	m	struct:ListNode	file:
val	14s-删除排序链表中的重复元素.cpp	/^    int val;$/;"	m	struct:ListNode	file:
